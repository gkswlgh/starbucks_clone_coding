<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="VocMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)를 명시한다. -->
	<resultMap id="vocMap"
		type="hanjiho.project.starbucks.model.Voc">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="voc_id"  column="voc_id" />
		<result property="phone"  column="phone" />
		<result property="email"  column="email" />
		<result property="visit_store"  column="visit_store" />
		<result property="store_name"  column="store_name" />
		<result property="visit_date"  column="v_date" />
		<result property="voc_ttl"  column="voc_ttl" />
		<result property="voc_txt"  column="voc_txt" />
		<result property="reg_date"  column="r_date" />
		<result property="voc_type"  column="voc_type" />
		<result property="voc_type2"  column="voc_type2" />
		<result property="member_id"  column="member_id" />
		<result property="re_ok"  column="re_ok" />
		<result property="voc_re_txt"  column="voc_re_txt" />
		<result property="re_reg_date"  column="r_r_date" />
	</resultMap>
	
	<!-- member 컬럼 null (회원탈퇴 서비스계층) -->
	<update id="memberNull"
		parameterType="hanjiho.project.starbucks.model.Member">
		UPDATE voc SET
		member_id=null
		WHERE member_id=#{id}
	</update>

	<!-- 단일행 조회를 위한 기능 정의 -->
	<select id="selectItem"
		parameterType="hanjiho.project.starbucks.model.Voc"
		resultMap="vocMap">
		SELECT
		voc_id, phone, email, visit_store, store_name, date_format(visit_date, '%Y-%m-%d') as v_date, voc_ttl, CONVERT(voc_txt USING utf8) as voc_txt, date_format(reg_date, '%Y-%m-%d') as r_date, voc_type, voc_type2, member_id, re_ok, CONVERT(voc_re_txt USING utf8) as voc_re_txt, date_format(re_reg_date, '%Y-%m-%d') as r_r_date
		FROM voc 
		WHERE voc_id=#{voc_id}
	</select>

	<!-- 다중행 조회를 위한 기능 정의 -->
	<select id="selectList"
		parameterType="hanjiho.project.starbucks.model.Voc"
		resultMap="vocMap">
		SELECT
		voc_id, phone, email, visit_store, store_name, date_format(visit_date, '%Y-%m-%d') as v_date, voc_ttl, CONVERT(voc_txt USING utf8) as voc_txt, date_format(reg_date, '%Y-%m-%d') as r_date, voc_type, voc_type2, member_id, re_ok, CONVERT(voc_re_txt USING utf8) as voc_re_txt, date_format(re_reg_date, '%Y-%m-%d') as r_r_date
		FROM voc
		<where>
			<if test="voc_type != null and voc_type != ''">
			 	voc_type = #{voc_type}
			</if>
			<if test="voc_type2 != null and voc_type2 != ''">
				AND voc_type2 = #{voc_type2}
			</if>
			<if test="member_id != null and member_id != ''">
				AND member_id = #{member_id}
			</if>
			<if test="re_ok != null and re_ok != ''">
				AND re_ok = #{re_ok}
			</if>
		</where>
		ORDER BY voc_id DESC
		
		<if test="listCount > 0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>

	<!-- 데이터 저장을 위한 기능 정의 -->
	<insert id="insertItem"
		parameterType="hanjiho.project.starbucks.model.Voc"
		useGeneratedKeys="true" keyProperty="voc_id">
		INSERT INTO voc (
		phone, email, visit_store, store_name, visit_date, voc_ttl, voc_txt, reg_date, voc_type, voc_type2, member_id, re_ok
		) VALUES (
		#{phone}, #{email}, #{visit_store}, #{store_name}, #{visit_date}, #{voc_ttl}, #{voc_txt}, now(), #{voc_type}, #{voc_type2}, #{member_id}, "N"
		)
	</insert>

	<!-- 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteItem"
		parameterType="hanjiho.project.starbucks.model.Voc">
		DELETE FROM voc WHERE voc_id=#{voc_id}
	</delete>

	<!-- 답변완료시 데이터 갱신을 위한 기능 정의 -->
	<update id="updateItem"
		parameterType="hanjiho.project.starbucks.model.Voc">
		UPDATE voc SET
		re_ok = "Y",
		voc_re_txt=#{voc_re_txt},
		re_reg_date=now()
		WHERE voc_id=#{voc_id}
	</update>

	<!-- 데이터 수 조회하기 -->
	<!-- 검색 조건에 맞는 데이터 수를 집계하여 int 타입으로 반환한다. coutn, max, min, sum, avg 함수를 
		사용한 경우, Mapper에서는 resultMap이 아닌 resultType으로 반환한다. -->
	<select id="selectCountAll"
		parameterType="hanjiho.project.starbucks.model.Voc"
		resultType="int">
		SELECT COUNT(*) FROM voc

		<where>
			<if test="voc_type != null and voc_type != ''">
			 	voc_type = #{voc_type}
			</if>
			<if test="voc_type2 != null and voc_type2 != ''">
				AND voc_type2 = #{voc_type2}
			</if>
			<if test="member_id != null and member_id != ''">
				AND member_id = #{member_id}
			</if>
			<if test="re_ok != null and re_ok != ''">
				AND re_ok = #{re_ok}
			</if>
		</where>
	</select>

</mapper>