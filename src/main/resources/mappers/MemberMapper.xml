<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="MemberMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)를 명시한다. -->
	<resultMap id="memberMap"
		type="hanjiho.project.starbucks.model.Member">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="id"  column="id" />
		<result property="user_id"  column="user_id" />
		<result property="user_pw"  column="user_pw" />
		<result property="user_name"  column="user_name" />
		<result property="user_email"  column="user_email" />
		<result property="phone"  column="phone" />
		<result property="birthday"  column="b_date" />
		<result property="gender"  column="gender" />
		<result property="is_out"  column="is_out" />
		<result property="login_date"  column="l_date" />
		<result property="reg_date"  column="r_date" />
		<result property="edit_date"  column="e_date" />
		<result property="postcode"  column="postcode" />
		<result property="addr1"  column="addr1" />
		<result property="addr2"  column="addr2" />
	</resultMap>

	<!-- 단일행 조회를 위한 기능 정의 -->
	<select id="selectItem"
		parameterType="hanjiho.project.starbucks.model.Member"
		resultMap="memberMap">
		SELECT 
		id, user_id, user_pw, user_name, user_email, phone, date_format(birthday, '%Y-%m-%d') as b_date, gender, is_out, date_format(login_date, '%Y-%m-%d') as l_date, date_format(reg_date, '%Y-%m-%d') as r_date, date_format(edit_date, '%Y-%m-%d') as e_date, postcode, addr1, addr2 
		FROM member 
		WHERE id=#{id}
	</select>

	<!-- 다중행 조회를 위한 기능 정의 -->
	<select id="selectList"
		parameterType="hanjiho.project.starbucks.model.Member"
		resultMap="memberMap">
		SELECT 
		id, user_id, user_pw, user_name, user_email, phone, date_format(birthday, '%Y-%m-%d') as b_date, gender, is_out, date_format(login_date, '%Y-%m-%d') as l_date, date_format(reg_date, '%Y-%m-%d') as r_date, date_format(edit_date, '%Y-%m-%d') as e_date, postcode, addr1, addr2
		FROM member
		<where>
			<if test="user_id != null and user_id != ''">
				user_id LIKE concat('%', #{user_id}, '%')
			</if>
			<if test="user_name != null and user_name != ''">
				OR user_name LIKE concat('%', #{user_name}, '%')
			</if>
			<if test="user_email != null and user_email != ''">
				OR user_email LIKE concat('%', #{user_email}, '%')
			</if>
		</where>

		ORDER BY id DESC
	</select>

	<!-- 데이터 저장을 위한 기능 정의 -->
	<insert id="insertItem"
		parameterType="hanjiho.project.starbucks.model.Member"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO member (
		user_id, user_pw, user_name, user_email, phone, birthday, gender, is_out, reg_date, edit_date
		) VALUES (
		#{user_id}, MD5(#{user_pw}), #{user_name}, #{user_email}, #{phone}, #{birthday}, #{gender}, #{is_out}, now(), now()
		)
	</insert>

	<!-- 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteItem"
		parameterType="hanjiho.project.starbucks.model.Member">
		DELETE FROM member WHERE id=#{id}
	</delete>

	<!-- 데이터 갱신을 위한 기능 정의 -->
	<update id="updateItem"
		parameterType="hanjiho.project.starbucks.model.Member">
		UPDATE member SET
		user_id=#{user_id},
		user_pw= MD5(#{user_pw}),
		user_name=#{user_name},
		user_email=#{user_email},
		phone=#{phone},
		birthday=#{birthday},
		gender=#{gender},
		is_out=#{is_out},
		edit_date=now(),
		postcode=#{postcode},
		addr1=#{addr1},
		addr2=#{addr2}
		WHERE id=#{id}
	</update>

	<!-- 데이터 수 조회하기 -->
	<!-- 검색 조건에 맞는 데이터 수를 집계하여 int 타입으로 반환한다. coutn, max, min, sum, avg 함수를 
		사용한 경우, Mapper에서는 resultMap이 아닌 resultType으로 반환한다. -->
	<select id="selectCountAll"
		parameterType="hanjiho.project.starbucks.model.Member"
		resultType="int">
		SELECT COUNT(*) FROM member

		<where>
			<if test="user_id != null and user_id != ''">
				user_id LIKE concat('%', #{user_id}, '%')
			</if>
			<if test="user_name != null and user_name != ''">
				OR user_name LIKE concat('%', #{user_name}, '%')
			</if>
			<if test="user_email != null and user_email != ''">
				OR user_email LIKE concat('%', #{user_email}, '%')
			</if>
		</where>
	</select>
	
	<!-- 아이디 중복검사 -->
    <select id="idUniqueCheck" parameterType="hanjiho.project.starbucks.model.Member" resultType="int">
        SELECT COUNT(*) FROM member WHERE user_id=#{user_id}
    </select>
    
    <!-- 이메일 중복검사 -->
    <select id="emailUniqueCheck" parameterType="hanjiho.project.starbucks.model.Member" resultType="int">
        SELECT COUNT(*) FROM member WHERE user_email=#{user_email}
    </select>
    
    <!-- 로그인 조회 -->
    <select id="login" parameterType="hanjiho.project.starbucks.model.Member" resultMap="memberMap">
        SELECT 
        id, user_id, user_pw, user_name, user_email, phone, date_format(birthday, '%Y-%m-%d') as b_date, gender, is_out, date_format(login_date, '%Y-%m-%d') as l_date, date_format(reg_date, '%Y-%m-%d') as r_date, date_format(edit_date, '%Y-%m-%d') as e_date, postcode, addr1, addr2 
        FROM member
        WHERE user_id=#{user_id} AND user_pw=MD5(#{user_pw}) AND is_out='N'
    </select>

    <!-- 최근 로그인 시간 갱신 -->
    <update id="updateLoginDate" parameterType="hanjiho.project.starbucks.model.Member">
        UPDATE member SET login_date=now() WHERE id=#{id}
    </update>

</mapper>