<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="OrderMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)를 명시한다. -->
	<resultMap id="orderMap"
		type="hanjiho.project.starbucks.model.Order">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="order_id"  column="order_id" />
		<result property="member_id"  column="member_id" />
		<result property="order_type"  column="order_type" />
		<result property="order_price"  column="order_price" />
		<result property="pay_method"  column="pay_method" />
		<result property="receive_complete"  column="receive_complete" />
		<result property="reg_date"  column="r_date" />
		<result property="postcode"  column="postcode" />
		<result property="addr1"  column="addr1" />
		<result property="addr2"  column="addr2" />
	</resultMap>

	<!-- 단일행 조회를 위한 기능 정의 -->
	<select id="selectItem"
		parameterType="hanjiho.project.starbucks.model.Order"
		resultMap="orderMap">
		SELECT 
		order_id, member_id, order_type, order_price, pay_method, receive_complete, date_format(reg_date, '%Y-%m-%d %H:%i:%s') as r_date, postcode, addr1, addr2 
		FROM `order`
		WHERE order_id=#{order_id}
	</select>

	<!-- 다중행 조회를 위한 기능 정의 -->
	<select id="selectList"
		parameterType="hanjiho.project.starbucks.model.Order"
		resultMap="orderMap">
		SELECT 
		order_id, member_id, order_type, order_price, pay_method, receive_complete, date_format(reg_date, '%Y-%m-%d %H:%i:%s') as r_date, postcode, addr1, addr2
		FROM `order`
		<where>
			<if test="member_id != null and member_id != ''">
				member_id = #{member_id}
			</if>
			<if test="reg_date != null and reg_date != ''">
				OR reg_date = #{reg_date}
			</if>
			<if test="order_type != null and order_type != ''">
				OR order_type = #{order_type}
			</if>
		</where>

		ORDER BY order_id DESC
	</select>

	<!-- 데이터 저장을 위한 기능 정의 -->
	<insert id="insertItem"
		parameterType="hanjiho.project.starbucks.model.Order"
		useGeneratedKeys="true" keyProperty="order_id">
		INSERT INTO `order` (
		member_id, order_price, order_type, pay_method, receive_complete, reg_date, postcode, addr1, addr2
		) VALUES (
		#{member_id}, #{order_price}, #{order_type}, #{pay_method}, #{receive_complete}, now(), #{postcode}, #{addr1}, #{addr2}
		)
	</insert>

	<!-- 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteItem"
		parameterType="hanjiho.project.starbucks.model.Order">
		DELETE FROM `order` WHERE order_id=#{order_id}
	</delete>

	<!-- 데이터 갱신을 위한 기능 정의 -->
	<update id="updateItem"
		parameterType="hanjiho.project.starbucks.model.Order">
		UPDATE `order` SET
		member_id=#{member_id},
		order_price=#{order_price},
		order_type=#{order_type},
		pay_method=#{pay_method},
		receive_complete=#{receive_complete},
		postcode=#{postcode},
		addr1=#{addr1},
		addr2=#{addr2}
		WHERE order_id=#{order_id}
	</update>

	<!-- 데이터 수 조회하기 -->
	<!-- 검색 조건에 맞는 데이터 수를 집계하여 int 타입으로 반환한다. coutn, max, min, sum, avg 함수를 
		사용한 경우, Mapper에서는 resultMap이 아닌 resultType으로 반환한다. -->
	<select id="selectCountAll"
		parameterType="hanjiho.project.starbucks.model.Order"
		resultType="int">
		SELECT COUNT(*) FROM `order`

		<where>
			<if test="member_id != null and member_id != ''">
				member_id = #{member_id}
			</if>
			<if test="reg_date != null and reg_date != ''">
				OR reg_date = #{reg_date}
			</if>
			<if test="order_type != null and order_type != ''">
				OR order_type = #{order_type}
			</if>
		</where>
	</select>

</mapper>